qemu-system-i386 floppy.img

qemu-system-i386 floppy.img -S -s

# -S stops qemu waiting gdb and -s makes gdb be able to attach through localhost:1234


netstat -plant

tcp6       0      0 :::1234                 :::*                    LISTEN      5616/qemu-system-i3 
tcp        0      0 0.0.0.0:1234            0.0.0.0:*               LISTEN      5616/qemu-system-i3 

gdb vmlinux

(gdb)target remote :1234
Ignoring packet error, continuing...
warning: unrecognized item "timeout" in "qSupported" response

# try something else

-nographic
           Normally, if QEMU is compiled with graphical window support, it displays output
           such as guest graphics, guest console, and the QEMU monitor in a window. With
           this option, you can totally disable graphical output so that QEMU is a simple
           command line application. The emulated serial port is redirected on the console
           and muxed with the monitor (unless redirected elsewhere explicitly). Therefore,
           you can still use QEMU to debug a Linux kernel with a serial console. Use C-a h
           for help on switching between the console and monitor.


qemu-system-i386 floppy.img -S -s -nographic

# not work


qemu-system-i386 floppy.img -S -s -monitor stdio

####SOLUTIOM


# start qeume and go direct to montori mode, stop boot process, and set up ability to connconect via socket

qemu-system-i386 floppy.img -S -s -monitor stdio

# now connect to it in GDB and set a wtchpoint to that address in memory, that will stop the debugger anythime somethin at that address icanged

Type "apropos word" to search for commands related to "word".
(gdb) target remote :1234
Remote debugging using :1234
warning: No executable has been specified and target does not support
determining executable automatically.  Try using the "file" command.
0x0000fff0 in ?? ()
(gdb) watch *0x7dc0
Hardware watchpoint 1: *0x7dc0
(gdb) watch *0x00007dc0
Hardware watchpoint 2: *0x00007dc0
(gdb) cont
Continuing.

# continur until you only see the first message in the qemu screen, then dump the contents in monitors mode 

memsave 0x7DC0 4096 outfile.mem



ACI{fast_dbg}
